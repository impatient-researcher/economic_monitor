scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none") +
labs(y = "SCMP Positive", x = "SCMP Negative") +
coord_cartesian(xlim = c(0, 5))
ggplot(master, aes(x = negative, y = positive, color = abs(positive - negative))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none") +
labs(y = "SCMP Positive", x = "SCMP Negative") +
coord_cartesian(xlim = c(0, 5))
ggplot(master, aes(x = negative, y = positive, color = abs(positive - negative))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none") +
labs(y = "SCMP Positive", x = "SCMP Negative")
ggplot(master, aes(x = negative, y = positive, color = abs(positive - negative))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none") +
labs(y = "SCMP Positive", x = "SCMP Negative") +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
ggplot(master, aes(x = negative, y = positive, color = abs(positive - negative))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format(), expand = c(0, 0)) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none") +
labs(y = "SCMP Positive", x = "SCMP Negative") +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
ggplot(master, aes(x = negative, y = positive, color = abs(positive - negative))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format(), expand = c(0, 0)) +
scale_y_log10(labels = percent_format(), expand = c(0, 0)) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none") +
labs(y = "SCMP Positive", x = "SCMP Negative")
master <- rbind(pos_df, neg_df) %>%
mutate(is_word = str_detect(word, regex("[a-z]+", TRUE))) %>% # both contain numbers
filter(is_word == TRUE) %>%
select(-is_word) %>%
count(nature, word) %>% # counting nature-word pair
group_by(nature) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(nature, proportion)
cor.test(~ `negative` + `positive`, data = master)
ggplot(master, aes(x = negative, y = positive, color = abs(positive - negative))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none") +
labs(y = "SCMP Positive", x = "SCMP Negative")
library(tidytext)
get_sentiments("nrc")
?inner_join
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count
View(master)
View(pos_df)
setwd("/Users/Yan_Ting_Hin/Box Sync/CK Law/text-mining/fundamentals")
library(stringr)
#library(tm)
library(dplyr)
library(tidyr)
library(tidytext)
library(ggplot2)
library(scales)
Clean_String <- function(string){
# Lowercase
temp <- tolower(string)
#' Remove everything that is not a number or letter (may want to keep more
#' stuff in your actual analyses).
temp <- stringr::str_replace_all(temp,"[^a-zA-Z\\s]", " ")
# Shrink down to just one white space
temp <- stringr::str_replace_all(temp,"[\\s]+", " ")
# Split it
temp <- stringr::str_split(temp, " ")[[1]]
# Get rid of trailing "" if necessary
indexes <- which(temp == "")
if(length(indexes) > 0){
temp <- temp[-indexes]
}
return(temp)
}
#' function to clean text
Clean_Text_Block <- function(text){
if(length(text) <= 1){
# Check to see if there is any text at all with another conditional
if(length(text) == 0){
cat("There was no text in this document! \n")
to_return <- list(num_tokens = 0, unique_tokens = 0, text = "")
}else{
# If there is , and only only one line of text then tokenize it
clean_text <- Clean_String(text)
num_tok <- length(clean_text)
num_uniq <- length(unique(clean_text))
to_return <- list(num_tokens = num_tok, unique_tokens = num_uniq, text = clean_text)
}
}else{
# Get rid of blank lines
indexes <- which(text == "")
if(length(indexes) > 0){
text <- text[-indexes]
}
# Loop through the lines in the text and use the append() function to
clean_text <- Clean_String(text[1])
for(i in 2:length(text)){
# add them to a vector
clean_text <- append(clean_text,Clean_String(text[i]))
}
# Calculate the number of tokens and unique tokens and return them in a
# named list object.
num_tok <- length(clean_text)
num_uniq <- length(unique(clean_text))
to_return <- list(num_tokens = num_tok, unique_tokens = num_uniq, text = clean_text)
}
return(to_return)
}
data(stop_words)
pos <- readLines("scmp_positive.txt")
pos <- str_split(pos, "\\. ")[[1]]
pos_df <- data_frame(line = 1:length(pos), text = pos) %>%
unnest_tokens(word, text) %>%
mutate(newspaper = "scmp", date = as.Date('2017-6-16'), nature = "positive") %>%
anti_join(stop_words, by = "word")
pos_graph <- pos_df %>%
count(word, sort = TRUE) %>%
filter(n > 1) %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n)) +
ggtitle("why-europe-and-us-cannot-afford-ignore-chinas-belt-and-road") +
geom_col() +
xlab(NULL) +
coord_flip()
pos_graph
# similiarly for negative article
neg <- readLines("scmp_negative.txt")
neg <- str_split(neg, "\\. ")[[1]]
neg_df <- data_frame(line = 1:length(neg), text = neg) %>%
unnest_tokens(word, text) %>%
mutate(newspaper = "scmp", date = as.Date('2017-6-18'), nature = "negative") %>%
anti_join(stop_words, by = "word")
neg_graph <- neg_df %>%
count(word, sort = TRUE) %>%
filter(n > 1) %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n)) +
ggtitle("risks-mean-belt-and-road-initiative-needs-firm-leadership") +
geom_col() +
xlab(NULL) +
coord_flip()
neg_graph
master <- rbind(pos_df, neg_df) %>%
mutate(is_word = str_detect(word, regex("[a-z]+", TRUE))) %>% # both contain numbers
filter(is_word == TRUE) %>%
select(-is_word)
master2 <- master %>%
count(nature, word) %>% # counting nature-word pair
group_by(nature) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(nature, proportion)
ggplot(master2, aes(x = negative, y = positive, color = abs(positive - negative))) +
ggtitle("Word Frequency (%)") +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none") +
labs(y = "SCMP Positive", x = "SCMP Negative")
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
View(bing_sent_count)
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count %>%
group_by(sentiment) %>%
top_n(5) %>%
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count %>%
group_by(sentiment) %>%
top_n(20) %>%
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count %>%
group_by(sentiment) %>%
top_n(10, wt = n) %>%
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
View(bing_sent_count)
temp <- bing_sent_count %>%
group_by(sentiment) %>%
top_n(10)
View(temp)
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
temp <- bing_sent_count %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count %>%
group_by(sentiment) %>%
top_n(10) %>% # more than 10 rows due to ties
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
# inner_join return all rows from x where there are matching values in y, and all columns
# from x and y. If there are multiple matches between x and y, all combination of the matches # are returned.
bing_sent_count <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(word, sentiment, sort = T) %>%
ungroup()
bing_sent_count %>%
group_by(sentiment) %>%
top_n(10) %>% # more than 10 rows due to ties
ungroup() %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Naive Measure of Contribution to Sentiment - Word Frequency",
x = NULL) +
coord_flip()
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
count(nature, word, sentiment, sort = T) %>%
ungroup()
View(bing_sent_count2)
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup()
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(nature, sentiment)
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(nature, n)
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n)
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n)
bing_sent_count2
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n) %>%
mutate(net = positve - negative)
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n)
%>%
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n)
%>%
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n)
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n) %>%
mutate(net = `positive` - `negative`)
bing_sent_count2
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n) %>%
mutate(net = `positive` - `negative`)
bing_sent_count2 %>%
ggplot(aes(nature, net)) %>%
geom_col()
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n) %>%
mutate(net = `positive` - `negative`)
bing_sent_count2 %>%
ggplot(aes(nature, net)) +
geom_col()
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n) %>%
mutate(net = `positive` - `negative`)
bing_sent_count2 %>%
ggplot(aes(nature, net)) +
geom_col(show.legend = FALSE) +
labs(y = "Net Position: #Positive Words - #Negative Words",
x = SCMP Newspaper) +
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n) %>%
mutate(net = `positive` - `negative`)
bing_sent_count2 %>%
ggplot(aes(nature, net)) +
geom_col(show.legend = FALSE) +
labs(y = "Net Position: #Positive Words - #Negative Words",
x = "SCMP Newspaper") +
coord_flip()
bing_sent_count2 <- master %>%
inner_join(get_sentiments("bing")) %>% #just positive and negative
group_by(nature) %>%
count(sentiment, sort = T) %>%
ungroup() %>%
spread(sentiment, n) %>%
mutate(net = `positive` - `negative`)
bing_sent_count2 %>%
ggplot(aes(nature, net)) +
geom_col(show.legend = FALSE) +
labs(y = "Net Position: #Positive Words - #Negative Words",
x = "SCMP Newspaper")
library(devtools)
install_github('andreacirilloac/updateR')
install.packages("pacman")
library(devtools)
install_github('andreacirilloac/updateR')
updateR(admin_password = 'Giraffe1sme!')
library(updateR)
updateR(admin_password = 'Giraffe1sme!')
install.packages("rgdal")
knit(input="hk_economy.rmd", output = "hk_economy.md")
?knit
library(knitr)
knit(input="hk_economy.rmd", output = "hk_economy.md")
setwd("/Users/Yan_Ting_Hin/impatient-researcher/ipynb_test")
knit(input="hk_economy.rmd", output = "hk_economy.md")
install.packages("rmdformats")
library(knitr)
knit(input="hk_economy.rmd", output = "hk_economy.md")
